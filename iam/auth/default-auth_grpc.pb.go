// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: default-auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DefaultAuthenticationService_Authenticate_FullMethodName          = "/auth.DefaultAuthenticationService/Authenticate"
	DefaultAuthenticationService_Login_FullMethodName                 = "/auth.DefaultAuthenticationService/Login"
	DefaultAuthenticationService_RequestPasswordReset_FullMethodName  = "/auth.DefaultAuthenticationService/RequestPasswordReset"
	DefaultAuthenticationService_ValidatePasswordReset_FullMethodName = "/auth.DefaultAuthenticationService/ValidatePasswordReset"
	DefaultAuthenticationService_PasswordReset_FullMethodName         = "/auth.DefaultAuthenticationService/PasswordReset"
	DefaultAuthenticationService_Logout_FullMethodName                = "/auth.DefaultAuthenticationService/Logout"
)

// DefaultAuthenticationServiceClient is the client API for DefaultAuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultAuthenticationServiceClient interface {
	Authenticate(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*StandardResponse, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*StandardResponse, error)
	RequestPasswordReset(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*StandardResponse, error)
	ValidatePasswordReset(ctx context.Context, in *ResetValidatorReq, opts ...grpc.CallOption) (*StandardResponse, error)
	PasswordReset(ctx context.Context, in *ResetReq, opts ...grpc.CallOption) (*StandardResponse, error)
	Logout(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*StandardResponse, error)
}

type defaultAuthenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultAuthenticationServiceClient(cc grpc.ClientConnInterface) DefaultAuthenticationServiceClient {
	return &defaultAuthenticationServiceClient{cc}
}

func (c *defaultAuthenticationServiceClient) Authenticate(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultAuthenticationServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultAuthenticationServiceClient) RequestPasswordReset(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_RequestPasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultAuthenticationServiceClient) ValidatePasswordReset(ctx context.Context, in *ResetValidatorReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_ValidatePasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultAuthenticationServiceClient) PasswordReset(ctx context.Context, in *ResetReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_PasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultAuthenticationServiceClient) Logout(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, DefaultAuthenticationService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultAuthenticationServiceServer is the server API for DefaultAuthenticationService service.
// All implementations must embed UnimplementedDefaultAuthenticationServiceServer
// for forward compatibility.
type DefaultAuthenticationServiceServer interface {
	Authenticate(context.Context, *AuthReq) (*StandardResponse, error)
	Login(context.Context, *LoginReq) (*StandardResponse, error)
	RequestPasswordReset(context.Context, *UserReq) (*StandardResponse, error)
	ValidatePasswordReset(context.Context, *ResetValidatorReq) (*StandardResponse, error)
	PasswordReset(context.Context, *ResetReq) (*StandardResponse, error)
	Logout(context.Context, *UserReq) (*StandardResponse, error)
	mustEmbedUnimplementedDefaultAuthenticationServiceServer()
}

// UnimplementedDefaultAuthenticationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDefaultAuthenticationServiceServer struct{}

func (UnimplementedDefaultAuthenticationServiceServer) Authenticate(context.Context, *AuthReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) Login(context.Context, *LoginReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) RequestPasswordReset(context.Context, *UserReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordReset not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) ValidatePasswordReset(context.Context, *ResetValidatorReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePasswordReset not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) PasswordReset(context.Context, *ResetReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) Logout(context.Context, *UserReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedDefaultAuthenticationServiceServer) mustEmbedUnimplementedDefaultAuthenticationServiceServer() {
}
func (UnimplementedDefaultAuthenticationServiceServer) testEmbeddedByValue() {}

// UnsafeDefaultAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultAuthenticationServiceServer will
// result in compilation errors.
type UnsafeDefaultAuthenticationServiceServer interface {
	mustEmbedUnimplementedDefaultAuthenticationServiceServer()
}

func RegisterDefaultAuthenticationServiceServer(s grpc.ServiceRegistrar, srv DefaultAuthenticationServiceServer) {
	// If the following call pancis, it indicates UnimplementedDefaultAuthenticationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DefaultAuthenticationService_ServiceDesc, srv)
}

func _DefaultAuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).Authenticate(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultAuthenticationService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultAuthenticationService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).RequestPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_RequestPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).RequestPasswordReset(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultAuthenticationService_ValidatePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetValidatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).ValidatePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_ValidatePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).ValidatePasswordReset(ctx, req.(*ResetValidatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultAuthenticationService_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_PasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).PasswordReset(ctx, req.(*ResetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultAuthenticationService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultAuthenticationServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultAuthenticationService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultAuthenticationServiceServer).Logout(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultAuthenticationService_ServiceDesc is the grpc.ServiceDesc for DefaultAuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultAuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.DefaultAuthenticationService",
	HandlerType: (*DefaultAuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _DefaultAuthenticationService_Authenticate_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _DefaultAuthenticationService_Login_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _DefaultAuthenticationService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "ValidatePasswordReset",
			Handler:    _DefaultAuthenticationService_ValidatePasswordReset_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _DefaultAuthenticationService_PasswordReset_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _DefaultAuthenticationService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "default-auth.proto",
}
